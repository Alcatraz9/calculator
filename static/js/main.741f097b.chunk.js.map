{"version":3,"sources":["darkMode.js","Button.js","addComma.js","Calculator.js","App.js","serviceWorker.js","index.js"],"names":["darkMode","document","body","classList","toggle","Button","operator","clicked","subc","isNaN","onClick","className","addComma","value","output","decimal","isNeg","includes","substring","indexOf","parseFloat","toLocaleString","Calculator","useState","setValue","memory","setMemory","op","setOp","handleClick","num","toString","length","id","type","App","class","aria-hidden","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.741f097b.chunk.js","sourcesContent":["const darkMode = () => {\r\n    var element = document.body;\r\n    element.classList.toggle(\"dark-mode\");\r\n}\r\n\r\nexport default darkMode;","import React from 'react';\r\n\r\nconst Button = ({operator, clicked}) => {\r\n    var subc = 'Button ';\r\n    if(!isNaN(operator)){\r\n        subc = subc + 'dark';\r\n    } else if(operator==='=' || operator=='AC'){\r\n        subc = subc + 'double';\r\n    }\r\n    return <button onClick={clicked(operator)} className={subc}>{operator}</button>;\r\n}\r\n\r\nexport default Button;","const addComma = (value) => {\r\n    var output = '';\r\n    var decimal = '';\r\n    var isNeg = false;\r\n    if(value.includes('.')) {\r\n        output = value.substring(0, value.indexOf('.'));\r\n        decimal = value.substring(value.indexOf('.'));\r\n    } else {\r\n        output = value;\r\n    }\r\n\r\n    if(parseFloat(value)<0){\r\n        isNeg = true;\r\n        output = output.substring(1);\r\n    }\r\n\r\n    if(isNeg){\r\n        return '-' + parseFloat(output).toLocaleString() + decimal;\r\n    } else {\r\n        return parseFloat(output).toLocaleString() + decimal;\r\n    }\r\n\r\n}\r\n\r\nexport default addComma;","import React, {useState} from 'react';\r\nimport Button from './Button';\r\nimport addComma from './addComma';\r\n\r\nvar Calculator = () => {\r\n    const [value, setValue] = useState('0');\r\n  const [memory, setMemory] = useState(null);\r\n  const [op, setOp] = useState(null);\r\n\r\n  const handleClick = operator => () => {\r\n    const num = parseFloat(value);\r\n\r\n    switch(operator){\r\n      case 'AC': setValue('0');setMemory(null);setOp(null);return;\r\n      case '∓': setValue((num*-1).toString());return;\r\n      case 'mod': if(value < 0){\r\n        setValue((num*-1).toString());\r\n      }return;\r\n      case '.': if(value.includes('.')) return;\r\n      setValue(value + '.');\r\n      return;\r\n      case '+': if(op != null){\r\n        if(op == '+'){\r\n          setMemory((memory + parseFloat(value)));\r\n        }\r\n        else if(op == '-'){\r\n          setMemory((memory - parseFloat(value)));\r\n        }\r\n        else if(op == '×'){\r\n          setMemory((memory * parseFloat(value)));\r\n        }\r\n        else if(op == '÷'){\r\n          setMemory((memory / parseFloat(value)));\r\n        }\r\n      } else {\r\n        setMemory(parseFloat(value));\r\n      }\r\n      setValue('0');setOp('+');\r\n      return;\r\n      case '-': if(op != null){\r\n        if(op == '+'){\r\n          setMemory((memory + parseFloat(value)));\r\n        }\r\n        else if(op == '-'){\r\n          setMemory((memory - parseFloat(value)));\r\n        }\r\n        else if(op == '×'){\r\n          setMemory((memory * parseFloat(value)));\r\n        }\r\n        else if(op == '÷'){\r\n          setMemory((memory / parseFloat(value)));\r\n        }\r\n      } else {\r\n        setMemory(parseFloat(value));\r\n      }\r\n      setValue('0');setOp('-');\r\n      return;\r\n      case '×': if(op != null){\r\n        if(op == '+'){\r\n          setMemory((memory + parseFloat(value)));\r\n        }\r\n        else if(op == '-'){\r\n          setMemory((memory - parseFloat(value)));\r\n        }\r\n        else if(op == '×'){\r\n          setMemory((memory * parseFloat(value)));\r\n        }\r\n        else if(op == '÷'){\r\n          setMemory((memory / parseFloat(value)));\r\n        }\r\n      } else {\r\n        setMemory(parseFloat(value));\r\n      }\r\n      setValue('0');setOp('×');\r\n      return;\r\n      case '÷': if(op != null){\r\n        if(op == '+'){\r\n          setMemory((memory + parseFloat(value)));\r\n        }\r\n        else if(op == '-'){\r\n          setMemory((memory - parseFloat(value)));\r\n        }\r\n        else if(op == '×'){\r\n          setMemory((memory * parseFloat(value)));\r\n        }\r\n        else if(op == '÷'){\r\n          setMemory((memory / parseFloat(value)));\r\n        }\r\n      } else {\r\n        setMemory(parseFloat(value));\r\n      }\r\n      setValue('0');setOp('÷');\r\n      return;\r\n      case 'ln': if(op != null){\r\n        if(op == '+'){\r\n          setMemory((memory + parseFloat(value)));\r\n        }\r\n        else if(op == '-'){\r\n          setMemory((memory - parseFloat(value)));\r\n        }\r\n        else if(op == '×'){\r\n          setMemory((memory * parseFloat(value)));\r\n        }\r\n        else if(op == '÷'){\r\n          setMemory((memory / parseFloat(value)));\r\n        }\r\n      } else {\r\n        setMemory(parseFloat(value));\r\n      }\r\n      setValue('0');setOp('+');\r\n      return;\r\n      case '=': if(op == '+'){\r\n        setValue((memory + parseFloat(value)).toString());\r\n      }\r\n      else if(op == '-'){\r\n        setValue((memory - parseFloat(value)).toString());\r\n      }\r\n      else if(op == '×'){\r\n        setValue((memory * parseFloat(value)).toString());\r\n      }\r\n      else if(op == '÷'){\r\n        setValue((memory / parseFloat(value)).toString());\r\n      }\r\n      setMemory(null);setOp(null);return;\r\n      case '⌫': if(value.length != 1) setValue(value.substring(0,value.length - 1));\r\n      else setValue('0');\r\n      return;\r\n    }\r\n\r\n    if(value[value.length - 1] == '.'){\r\n      setValue(value + operator);\r\n    } else {\r\n      setValue(parseFloat(num + operator).toString());\r\n    }\r\n\r\n  };\r\n  return(\r\n    <div className=\"container\">\r\n        <div id='result' className=\"result\">{addComma(value)}</div>\r\n        <Button clicked={handleClick} operator='mod' type=\"function\" />\r\n        <Button clicked={handleClick} operator='AC' type=\"function\" />\r\n        <Button clicked={handleClick} operator='⌫' type=\"function\" />\r\n        <Button clicked={handleClick} operator='7' />\r\n        <Button clicked={handleClick} operator='8' />\r\n        <Button clicked={handleClick} operator='9' />\r\n        <Button clicked={handleClick} operator='÷' type='operation' />\r\n        <Button clicked={handleClick} operator='4' />\r\n        <Button clicked={handleClick} operator='5' />\r\n        <Button clicked={handleClick} operator='6' />\r\n        <Button clicked={handleClick} operator='×' type='operation'  />\r\n        <Button clicked={handleClick} operator='1' />\r\n        <Button clicked={handleClick} operator='2' />\r\n        <Button clicked={handleClick} operator='3' />\r\n        <Button clicked={handleClick} operator='-' type='operation'  />        \r\n        <Button clicked={handleClick} operator='∓' type=\"function\" />\r\n        <Button clicked={handleClick} operator='0' />\r\n        <Button clicked={handleClick} operator='.' />\r\n        <Button clicked={handleClick} operator='+' type='operation'  />\r\n        <Button clicked={handleClick} operator='=' type=\"operation\" />\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default Calculator;\r\n","import React from 'react';\nimport './App.css';\nimport darkMode from './darkMode';\nimport Calculator from './Calculator';\n\nconst App = () => {\n\n\n    return (\n    <>\n      <button onClick={darkMode} className=\"d-mode\"><i class=\"fa fa-moon-o fa-4x\" aria-hidden=\"true\"></i>\n</button>\n      <Calculator />\n    </>\n  )}\n  \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}